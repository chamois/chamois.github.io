<Version>1.0.1</Version>

<ProgrammingBlock type="comment">Goal: Make the program do the following...</ProgrammingBlock>

<ProgrammingBlock type="comment">1) Drive forward until bump</ProgrammingBlock>

<ProgrammingBlock type="comment">2) Move backwards 1 rotation</ProgrammingBlock>

<ProgrammingBlock type="comment">3) Turn right 90 degrees</ProgrammingBlock>

<ProgrammingBlock type="comment">4) Drive backwards until the sonar sensor is less than 200mm</ProgrammingBlock>

<ProgrammingBlock type="comment">5) Move the arm up 40 degrees</ProgrammingBlock>

<ProgrammingBlock type="comment">Rules...</ProgrammingBlock>

<ProgrammingBlock type="comment">You may add commands</ProgrammingBlock>

<ProgrammingBlock type="comment">You may comment and remove commands</ProgrammingBlock>

<ProgrammingBlock type="comment">You may change the parameters of the commands</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">50</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor">noMotorOnPort</Parameter>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor">noMotorOnPort</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&lt;</Parameter>
        <Parameter name="RHS" type="float">200</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="turnRight">
    <Parameters>
        <Parameter name="quantity" type="float">90</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">50</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">leftMotor</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">rightMotor</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor">noMotorOnPort</Parameter>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor">noMotorOnPort</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&lt;</Parameter>
        <Parameter name="RHS" type="float">200</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="moveMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">armMotor</Parameter>
        <Parameter name="quantity" type="float">40</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">degrees</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, openLoop, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, openLoop, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, openLoop, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, openLoop, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, openLoop, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, openLoop, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	// Goal: Make the program do the following...
	// 1) Drive forward until bump
	// 2) Move backwards 1 rotation
	// 3) Turn right 90 degrees
	// 4) Drive backwards until the sonar sensor is less than 200mm
	// 5) Move the arm up 40 degrees
	// Rules...
	// You may add commands
	// You may comment and remove commands
	// You may change the parameters of the commands
	setMultipleMotors(50, leftMotor, leftMotor, noMotorOnPort, noMotorOnPort);
	waitUntil (getDistanceValue(distanceMM) &lt; 200);
	turnRight(90, rotations, 50);
	setMultipleMotors(50, leftMotor, rightMotor, noMotorOnPort, noMotorOnPort);
	waitUntil (getDistanceValue(distanceMM) &lt; 200);
	moveMotor(armMotor, 40, degrees, 50);
}
</CSource>
